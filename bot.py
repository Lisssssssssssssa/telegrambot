# –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ 32 —Ä–∞–∑—Ä—è–¥–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

import telebot
import sqlite3
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "–≤–∞—à —Ç–æ–∫–µ–Ω"
CHANNEL = "–≤–∞—à –∫–∞–Ω–∞–ª"  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
types = telebot.types

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
pending_broadcasts = {}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect('.venv/Lib/ships.db')
    c = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    c.execute('''CREATE TABLE IF NOT EXISTS ships (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL UNIQUE,
                discounts TEXT NOT NULL)''')

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    c.execute('''CREATE VIRTUAL TABLE IF NOT EXISTS ships_fts 
                USING fts5(name, discounts)''')
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                    chat_id INTEGER PRIMARY KEY,
                    username TEXT)''')
    conn.commit()
    conn.close()
    print("–ë–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞")


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
def create_broadcast_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    yes_btn = types.InlineKeyboardButton("–î–∞", callback_data="broadcast_yes")
    no_btn = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="broadcast_no")
    markup.add(yes_btn, no_btn)
    return markup


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
def add_new(message, name, discounts):
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ ","
    clean_list = [name.strip() for name in name.split(',')]
    added_in_this_session = []
    for i in clean_list:
        if i == "":
            continue
        conn = sqlite3.connect('.venv/Lib/ships.db')
        c = conn.cursor()
        try:
            c.execute("INSERT INTO ships (name, discounts) VALUES (?, ?)",
                      (i, discounts))
            c.execute("INSERT INTO ships_fts (name, discounts) VALUES (?, ?)",
                      (i, discounts))
            conn.commit()
            bot.send_message(message.chat.id, f'‚úÖ–ù–æ–≤—ã–π —Ç–µ–ø–ª–æ—Ö–æ–¥ {i} –¥–æ–±–∞–≤–ª–µ–Ω')
            added_in_this_session.append(i)
        except sqlite3.IntegrityError:
            bot.send_message(message.chat.id, f'‚ùå –¢–µ–ø–ª–æ—Ö–æ–¥ {i} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.')
        finally:
            conn.close()

    if not added_in_this_session:
        bot.send_message(message.chat.id, "–ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞.")
        return send_welcome(message)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = "üéâ *–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–µ–ø–ª–æ—Ö–æ–¥—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏!*\n\n"
    for ship in added_in_this_session:
        broadcast_text += f"üö¢ *{ship}*: {discounts}\n\n"
    broadcast_text += "–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ: /start"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = create_broadcast_keyboard()
    sent_msg = bot.send_message(
        message.chat.id,
        f"‚úÖ –¢–µ–ø–ª–æ—Ö–æ–¥(—ã) –¥–æ–±–∞–≤–ª–µ–Ω(—ã). –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    pending_broadcasts[sent_msg.message_id] = broadcast_text


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
def edit_existing_name(message, name, new_name):
    name = name.strip()
    name = name.replace(',', '')
    conn = sqlite3.connect('.venv/Lib/ships.db')
    c = conn.cursor()
    try:
        c.execute("UPDATE ships SET name=? WHERE (name=?)",
                  (new_name, name))
        c.execute("UPDATE ships_fts SET name=? WHERE (name=?)",
                  (new_name, name))
    except sqlite3.IntegrityError:
        pass  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, f'‚úÖ–¢–µ–ø–ª–æ—Ö–æ–¥ {name} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {new_name}')
    send_welcome(message)


def edit_existing_discounts(message, name, discounts):
    clean_list = [name.strip() for name in name.split(',')]
    updated_ships = []  # –°–ø–∏—Å–æ–∫ —Ç–µ–ø–ª–æ—Ö–æ–¥–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏
    for i in clean_list:
        conn = sqlite3.connect('.venv/Lib/ships.db')
        c = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            c.execute("SELECT discounts FROM ships WHERE name=?", (i,))
            old_discounts = c.fetchone()
            old_discounts = old_discounts[0] if old_discounts else ""

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∏–¥–∫–∏
            c.execute("UPDATE ships SET discounts=? WHERE (name=?)",
                      (discounts, i))
            c.execute("UPDATE ships_fts SET discounts=? WHERE (name=?)",
                      (discounts, i))
            conn.commit()
            updated_ships.append(i)
            if i != "":
                # –ï—Å–ª–∏ —Å–∫–∏–¥–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                if old_discounts != discounts:
                    bot.send_message(message.chat.id, f'‚úÖ–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ç–µ–ø–ª–æ—Ö–æ–¥–∞ {i}')

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                    broadcast_text = f"üéâ *–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ç–µ–ø–ª–æ—Ö–æ–¥–∞ {i}!*\n\n"
                    broadcast_text += f"üö¢ *–°—Ç–∞—Ä—ã–µ —Å–∫–∏–¥–∫–∏*: {old_discounts}\n"
                    broadcast_text += f"üî• *–ù–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏*: {discounts}\n\n"
                    broadcast_text += "–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ: /start"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    markup = create_broadcast_keyboard()
                    sent_msg = bot.send_message(
                        message.chat.id,
                        f"‚úÖ –°–∫–∏–¥–∫–∏ –¥–ª—è {i} –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
                        reply_markup=markup
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
                    pending_broadcasts[sent_msg.message_id] = broadcast_text
                else:
                    bot.send_message(message.chat.id, f'‚ÑπÔ∏è –°–∫–∏–¥–∫–∏ –¥–ª—è —Ç–µ–ø–ª–æ—Ö–æ–¥–∞ {i} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å')

        except Exception as e:
            bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–∏–¥–æ–∫ –¥–ª—è —Ç–µ–ø–ª–æ—Ö–æ–¥–∞ {i}: {str(e)}')
        finally:
            conn.close()

    if not updated_ships:
        bot.send_message(message.chat.id, f'–ù–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞')
    else:
        # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –±–µ–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ —Å–∫–∏–¥–∫–∏ –Ω–µ –º–µ–Ω—è–ª–∏—Å—å)
        send_welcome(message)


# –£–¥–∞–ª–µ–Ω–∏–µ
def delete(message, name):
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ ","
    clean_list = [name.strip() for name in name.split(',')]
    for i in clean_list:
        conn = sqlite3.connect('.venv/Lib/ships.db')
        c = conn.cursor()
        try:
            c.execute("DELETE FROM ships WHERE (name=?)",
                      ([i]))
            c.execute("DELETE FROM ships_fts WHERE (name=?)",
                      ([i]))
            if i != "":
                bot.send_message(message.chat.id, f'‚úÖ–¢–µ–ø–ª–æ—Ö–æ–¥ {i} —É–¥–∞–ª–µ–Ω')
        except sqlite3.IntegrityError:
            pass  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        conn.commit()
        conn.close()

    send_welcome(message)


# –ü–æ–∏—Å–∫ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞
def search_ship(query):
    conn = sqlite3.connect('.venv/Lib/ships.db')
    c = conn.cursor()

    # –ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FTS5
    c.execute('''
    SELECT name, discounts 
    FROM ships_fts 
    WHERE name MATCH ? 
    ORDER BY rank
    LIMIT 1
    ''', (f'"{query}"',))

    result = c.fetchone()
    conn.close()

    return result


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
def is_subscribed(chat_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL, chat_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception:
        print("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ")
        return False


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã
## –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def button_inline_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton(
            text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π',
            callback_data='add_new'
        ),
        types.InlineKeyboardButton(
            text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
            callback_data='edit_existing'
        ),
        types.InlineKeyboardButton(
            text='‚ùå –£–¥–∞–ª–∏—Ç—å',
            callback_data='delete'
        ),
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='back_to_main'
        )
    ]
    markup.add(*buttons)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)


###  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def button_inline_menu_edit(message, name):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton(
            text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è',
            callback_data='change_name'
        ),
        types.InlineKeyboardButton(
            text='–ò–∑–º–µ–Ω–∏—Ç–∏—Ç—å —Å–∫–∏–¥–∫—É',
            callback_data='change_discounts'
        ),
        types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='back_to_main'
        )
    ]
    markup.add(*buttons)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if not is_subscribed(message.chat.id):
        markup = types.InlineKeyboardMarkup()
        subscribe_btn = types.InlineKeyboardButton(
            "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            url=f"https://t.me/{CHANNEL[1:]}")
        check_btn = types.InlineKeyboardButton(
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="check_subscription")
        markup.add(subscribe_btn, check_btn)

        bot.send_message(
            message.chat.id,
            f"üö¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–µ—á–Ω—ã—Ö –∫—Ä—É–∏–∑–æ–≤!\n\n"
            f"üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫–∏–¥–∫–∞–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL}\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode='Markdown',
            reply_markup=markup)
        return

        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í—Å–µ —Ç–µ–ø–ª–æ—Ö–æ–¥—ã"))
    markup.add(types.KeyboardButton("–ü–æ–∏—Å–∫ —Å–∫–∏–¥–æ–∫"))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
    if bot.get_chat_member(CHANNEL, message.chat.id).status in ['creator',
                                                                'administrator'] or message.chat.id in id_admin:
        markup.add(types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"))
        print(bot.get_chat_member(CHANNEL, message.chat.id).status)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–≤—É–º—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
    bot.send_message(
        message.chat.id,
        "üö¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í—Å–µ —Ç–µ–ø–ª–æ—Ö–æ–¥—ã'\n"
        "‚Ä¢ –ò–ª–∏ '–ü–æ–∏—Å–∫ —Å–∫–∏–¥–æ–∫' –¥–ª—è –ø–æ–º–æ—â–∏\n\n"
        "–ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∫—Ä—É–∏–∑—ã –æ–Ω–ª–∞–π–Ω –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µüòâ",
        reply_markup=markup)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    conn = sqlite3.connect('.venv/Lib/ships.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (chat_id) VALUES (?)", (message.chat.id,))
    conn.commit()
    conn.close()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    inline_markup = types.InlineKeyboardMarkup()
    site_btn = types.InlineKeyboardButton(
        "üåê –ù–∞—à —Å–∞–π—Ç",
        url="–≤–∞—à —Å–∞–π—Ç")
    inline_markup.add(site_btn)
    bot.send_message(
        message.chat.id,
        "üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä—É–∏–∑",
        reply_markup=inline_markup)


#############
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "check_subscription":
        if is_subscribed(call.message.chat.id):
            bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.")
            send_welcome(call.message)
        else:
            bot.answer_callback_query(
                call.id,
                "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª",
                show_alert=True)
    elif call.data == "back_to_main":
        send_welcome(call.message)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
    elif call.data == "add_new":
        bot.send_message(call.message.chat.id, "–í—ã–±—Ä–∞–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ")
        markup = types.ForceReply(selective=False)
        # –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞", reply_markup=markup)

        @bot.message_handler(content_types=['text'])
        def message_input_step(message):
            global name_tepl
            name_tepl = message.text
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É", reply_markup=markup)

            # –í–≤–æ–¥–∏–º —Å–∫–∏–¥–∫—É
            def message_input_discount(message):
                global discount_tepl
                discount_tepl = message.text
                add_new(message, name_tepl, discount_tepl)

            bot.register_next_step_handler(call.message, message_input_discount)

        bot.register_next_step_handler(call.message, message_input_step)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    elif call.data == "edit_existing":
        bot.send_message(call.message.chat.id, "–í—ã–±—Ä–∞–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ")
        markup = types.ForceReply(selective=False)
        # –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=markup)

        @bot.message_handler(content_types=['text'])
        def message_input_step(message):
            global name_tepl
            global name_list
            name_tepl = message.text
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ ","
            clean_list = [name_tepl.strip() for name_tepl in name_tepl.split(',')]
            # –ü–æ–∏—â–µ–º —Ç–µ–ø–ª–æ—Ö–æ–¥ –≤ –±–∞–∑–µ. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º, —Ç–æ —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º.
            # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–ø–ª–æ—Ö–æ–¥–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –¥–∞–ª—å—à–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
            name_list = ""
            for i in clean_list:
                result = search_ship(i)
                if result:
                    name, discounts = result
                    response = f"üö¢ {name} –Ω–∞–π–¥–µ–Ω"
                    bot.send_message(message.chat.id, response)
                    name_list = f'{name_list} {name},'
                else:
                    bot.send_message(message.chat.id, f'‚ùå –¢–µ–ø–ª–æ—Ö–æ–¥ {i} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
            if name_list != "":
                button_inline_menu_edit(call.message, name_list)
            else:
                bot.send_message(message.chat.id, f'–ù–µ—Ç —Ç–µ–ø–ª–æ—Ö–æ–¥–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
                send_welcome(message)

        bot.register_next_step_handler(call.message, message_input_step)

    elif call.data == "change_name":
        bot.send_message(call.message.chat.id, f'–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–º—è —Ç–µ–ø–ª–æ—Ö–æ–¥–∞ {name_list}')
        clean_list = [name_list.strip() for name_list in name_list.split(',')]
        if len(clean_list) > 2:
            bot.send_message(call.message.chat.id, f'–ü–∞–∫–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!')
            return send_welcome(call.message)
        markup = types.ForceReply(selective=False)
        # –í–≤–æ–¥–∏–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞", reply_markup=markup)

        @bot.message_handler(content_types=['text'])
        def message_input_step(message):
            global new_name
            new_name = message.text
            edit_existing_name(message, name_list, new_name)

        bot.register_next_step_handler(call.message, message_input_step)

    elif call.data == "change_discounts":
        bot.send_message(call.message.chat.id, "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–∫–∏–¥–∫–∏ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞")
        markup = types.ForceReply(selective=False)
        # –í–≤–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ç–µ–ø–ª–æ—Ö–æ–¥–∞", reply_markup=markup)

        @bot.message_handler(content_types=['text'])
        def message_input_step(message):
            global discounts
            discounts = message.text
            edit_existing_discounts(message, name_list, discounts)

        bot.register_next_step_handler(call.message, message_input_step)


    # –£–¥–∞–ª–µ–Ω–∏–µ
    elif call.data == "delete":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç–µ–ø–ª–æ—Ö–æ–¥")
        markup = types.ForceReply(selective=False)
        # –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=markup)

        @bot.message_handler(content_types=['text'])
        def message_input_step(message):
            global name_tepl
            name_tepl = message.text
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ ","
            clean_list = [name_tepl.strip() for name_tepl in name_tepl.split(',')]
            # –ü–æ–∏—â–µ–º —Ç–µ–ø–ª–æ—Ö–æ–¥ –≤ –±–∞–∑–µ. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º, —Ç–æ —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º.
            # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–ø–ª–æ—Ö–æ–¥–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –¥–∞–ª—å—à–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
            name_list = ""
            for i in clean_list:
                result = search_ship(i)
                if result:
                    name, discounts = result
                    response = f"üö¢ {name} –Ω–∞–π–¥–µ–Ω"
                    bot.send_message(message.chat.id, response)
                    name_list = f'{name_list} {name},'
                else:
                    bot.send_message(message.chat.id, f'‚ùå –¢–µ–ø–ª–æ—Ö–æ–¥ {i} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω')
            if name_list != "":
                delete(message, name_list)
            else:
                bot.send_message(message.chat.id, f'–ù–µ—Ç —Ç–µ–ø–ª–æ—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
                send_welcome(message)

        bot.register_next_step_handler(call.message, message_input_step)
        # –†–∞—Å—Å—ã–ª–∫–∞
    elif call.data == "broadcast_yes":
        message_id = call.message.message_id
        broadcast_text = pending_broadcasts.get(message_id)
        if broadcast_text is None:
            bot.answer_callback_query(call.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ —É—Å—Ç–∞—Ä–µ–ª–∞.")
            return

        conn = sqlite3.connect('.venv/Lib/ships.db')
        c = conn.cursor()
        c.execute("SELECT chat_id FROM users")
        users = c.fetchall()
        conn.close()

        count = 0
        errors = 0
        for user in users:
            chat_id = user[0]
            try:
                bot.send_message(chat_id, broadcast_text, parse_mode='Markdown')
                count += 1
            except Exception as e:
                errors += 1

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if message_id in pending_broadcasts:
            del pending_broadcasts[message_id]

        bot.send_message(
            call.message.chat.id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {count}"
        )
        send_welcome(call.message)

    elif call.data == "broadcast_no":
        message_id = call.message.message_id
        if message_id in pending_broadcasts:
            del pending_broadcasts[message_id]
        bot.send_message(call.message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        send_welcome(call.message)
    ################


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not is_subscribed(chat_id):
        markup = types.InlineKeyboardMarkup()
        subscribe_btn = types.InlineKeyboardButton(
            "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            url=f"https://t.me/{CHANNEL[1:]}")
        check_btn = types.InlineKeyboardButton(
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="check_subscription")
        markup.add(subscribe_btn, check_btn)

        bot.send_message(
            chat_id,
            f"üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫–∏–¥–∫–∞–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL}",
            parse_mode='Markdown',
            reply_markup=markup)
        return
    conn = sqlite3.connect('.venv/Lib/ships.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (chat_id) VALUES (?)", (chat_id,))
    conn.commit()
    conn.close()
    text = message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ —Ç–µ–ø–ª–æ—Ö–æ–¥—ã"
    if text.lower() == "–≤—Å–µ —Ç–µ–ø–ª–æ—Ö–æ–¥—ã":
        inline_markup = types.InlineKeyboardMarkup()
        site_btn = types.InlineKeyboardButton(
            "üåê –ù–∞—à —Å–∞–π—Ç",
            url="https://www.moretravel.ru/ts/#country=22222246&type=cruises")
        inline_markup.add(site_btn)
        bot.send_message(
            message.chat.id,
            "üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä—É–∏–∑",
            reply_markup=inline_markup)
        conn = sqlite3.connect('.venv/Lib/ships.db')
        c = conn.cursor()
        c.execute("SELECT name FROM ships ORDER BY name")
        ships = [row[0] for row in c.fetchall()]
        conn.close()

        response = "üö¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–ø–ª–æ—Ö–æ–¥–æ–≤:\n\n" + "\n".join(
            f"‚Ä¢ {ship}" for ship in ships)
        bot.send_message(message.chat.id, response, parse_mode='Markdown')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ø–æ–∏—Å–∫ —Å–∫–∏–¥–æ–∫"
    if text.lower() == "–ø–æ–∏—Å–∫ —Å–∫–∏–¥–æ–∫":
        bot.send_message(
            message.chat.id,
            "üîç –ö–∞–∫ –∏—Å–∫–∞—Ç—å —Å–∫–∏–¥–∫–∏:\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –í–æ–ª–≥–∞ –î—Ä–∏–º\n"
            "‚Ä¢ –°–µ–≤–µ—Ä–Ω–∞—è —Å–∫–∞–∑–∫–∞\n"
            "‚Ä¢ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–µ–≤—Å–∫–∏–π\n\n"
            "–ë–æ—Ç –Ω–∞–π–¥—ë—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞!",
            parse_mode='Markdown')
        return

    # –ö–Ω–æ–ø–∫–∞ "–∏–∑–º–µ–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    if text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö":
        button_inline_menu(message)
        return

    # –ü–æ–∏—Å–∫ —Ç–µ–ø–ª–æ—Ö–æ–¥–∞
    result = search_ship(text)

    if result:
        name, discounts = result
        response = f"üö¢ {name}\n\n{discounts}\n\n –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        # bot.send_message(message.chat.id, response, parse_mode='Markdown')
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –¢–µ–ø–ª–æ—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /start",
            parse_mode='Markdown')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∂–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ, –ø–æ—Ç–æ–º –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
#init_database()

bot.infinity_polling()